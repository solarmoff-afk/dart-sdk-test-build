name: Build Full Dart SDK for Android
on:
  workflow_dispatch:
    inputs:
      target_arch:
        description: 'Target Architecture (for the final SDK: arm64c or arm)'
        required: true
        type: choice
        default: 'arm64c'
        options:
          - arm64c
          - arm
jobs:
  compile:
    container:
      image: docker.io/library/debian
    runs-on: ubuntu-latest
    steps:
      - name: Install build tools
        run: |
          apt-get update
          apt-get install --no-install-recommends -y ca-certificates curl git python3
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache depot_tools and Dart SDK sources
        id: cache-dart
        uses: actions/cache@v4
        with:
          path: |
            depot_tools
            dart-sdk
          key: ${{ runner.os }}-debian-dart-3.9.0-${{ inputs.target_arch }}
      - name: Fetch Dart SDK and Android Dependencies
        if: steps.cache-dart.outputs.cache-hit != 'true'
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export DEPOT_TOOLS_UPDATE=0 PATH=$PWD/depot_tools:$PATH
          mkdir dart-sdk
          cd dart-sdk
          gclient config --name sdk --custom-var download_android_deps=True "https://dart.googlesource.com/sdk.git@3.9.0"
          gclient sync --no-history
      - name: Build the full SDK for Android
        run: |
          export DEPOT_TOOLS_UPDATE=0 PATH=$PWD/depot_tools:$PATH
          cd dart-sdk/sdk
          python3 ./tools/build.py --mode release --os android --arch ${{ inputs.target_arch }} create_sdk
      - name: Upload RAW build output as a safety artifact
        uses: actions/upload-artifact@v4
        with:
          name: raw-build-output-${{ inputs.target_arch }}
          path: dart-sdk/sdk/out/
  package:
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y tar binutils
      - name: Download the RAW build output
        uses: actions/download-artifact@v4
        with:
          name: raw-build-output-${{ inputs.target_arch }}
      - name: Strip and Archive the final SDK
        run: |
          SNAPSHOT_DIR=$(find . -type d -name "Release*android_${{ inputs.target_arch }}*")
          echo "Found snapshot directory: $SNAPSHOT_DIR"
          cd "$SNAPSHOT_DIR"
          strip gen_snapshot* dartaotruntime*
          tar -czf full_sdk_output.tar.gz .
      - name: Upload the final STRIPPED artifact
        uses: actions/upload-artifact@v4
        with:
          name: full-dart-sdk-android-${{ inputs.target_arch }}-stripped
          path: "**/full_sdk_output.tar.gz"